package btwitter

import (
	"io"
	"net/http"
	"os"
	"time"

	"github.com/dghubble/go-twitter/twitter"
)

type AutoGenerated struct {
	Data []struct {
		ID               string `json:"id"`
		EventType        string `json:"event_type"`
		SenderID         string `json:"sender_id"`
		DmConversationID string `json:"dm_conversation_id"`
		Text             string `json:"text"`
		Attachments      struct {
			MediaKeys []string `json:"media_keys"`
		} `json:"attachments,omitempty"`
		CreatedAt time.Time `json:"created_at"`
	} `json:"data"`
	Includes struct {
		Media []struct {
			URL      string `json:"url"`
			Width    int    `json:"width"`
			Height   int    `json:"height"`
			MediaKey string `json:"media_key"`
			Type     string `json:"type"`
		} `json:"media"`
		Users []struct {
			ID            string `json:"id"`
			PublicMetrics struct {
				FollowersCount int `json:"followers_count"`
				FollowingCount int `json:"following_count"`
				TweetCount     int `json:"tweet_count"`
				ListedCount    int `json:"listed_count"`
			} `json:"public_metrics"`
			ProfileImageURL string    `json:"profile_image_url"`
			Username        string    `json:"username"`
			Name            string    `json:"name"`
			CreatedAt       time.Time `json:"created_at"`
			Description     string    `json:"description"`
		} `json:"users"`
	} `json:"includes"`
	Meta struct {
		ResultCount int `json:"result_count"`
	} `json:"meta"`
}

type DmEventResp struct {
	Events []struct {
		CreatedTimestamp string `json:"created_timestamp"`
		ID               string `json:"id"`
		Type             string `json:"type"`
		MessageCreate    struct {
			SenderID string `json:"sender_id"`
			Target   struct {
				RecipientID string `json:"recipient_id"`
			} `json:"target"`
			MessageData struct {
				Text     string `json:"text"`
				Entities struct {
					Hashtags []interface{} `json:"hashtags"`
					Media    interface{}   `json:"media"`
					Urls     []struct {
						URL         string `json:"url"`
						DisplayURL  string `json:"display_url"`
						ExpandedURL string `json:"expanded_url"`
						Unwound     struct {
							URL         string `json:"url"`
							Status      int    `json:"status"`
							Title       string `json:"title"`
							Description string `json:"description"`
						} `json:"Unwound"`
						Indices []int `json:"indices"`
					} `json:"urls"`
					UserMentions []interface{} `json:"user_mentions"`
					Symbols      []interface{} `json:"symbols"`
					Polls        interface{}   `json:"polls"`
				} `json:"entities"`
				Attachment struct {
					Type  string `json:"type"`
					Media struct {
						URL         string `json:"url"`
						DisplayURL  string `json:"display_url"`
						ExpandedURL string `json:"expanded_url"`
						Unwound     struct {
							URL         string `json:"url"`
							Status      int    `json:"status"`
							Title       string `json:"title"`
							Description string `json:"description"`
						} `json:"Unwound"`
						Indices           []int  `json:"indices"`
						ID                int64  `json:"id"`
						IDStr             string `json:"id_str"`
						MediaURL          string `json:"media_url"`
						MediaURLHTTPS     string `json:"media_url_https"`
						SourceStatusID    int    `json:"source_status_id"`
						SourceStatusIDStr string `json:"source_status_id_str"`
						Type              string `json:"type"`
						Sizes             struct {
							Thumb struct {
								W      int    `json:"w"`
								H      int    `json:"h"`
								Resize string `json:"resize"`
							} `json:"thumb"`
							Large struct {
								W      int    `json:"w"`
								H      int    `json:"h"`
								Resize string `json:"resize"`
							} `json:"large"`
							Medium struct {
								W      int    `json:"w"`
								H      int    `json:"h"`
								Resize string `json:"resize"`
							} `json:"medium"`
							Small struct {
								W      int    `json:"w"`
								H      int    `json:"h"`
								Resize string `json:"resize"`
							} `json:"small"`
						} `json:"sizes"`
						VideoInfo struct {
							AspectRatio    []int       `json:"aspect_ratio"`
							DurationMillis int         `json:"duration_millis"`
							Variants       interface{} `json:"variants"`
						} `json:"video_info"`
					} `json:"media"`
				} `json:"attachment"`
			} `json:"message_data"`
		} `json:"message_create"`
	} `json:"events"`
	NextCursor string `json:"next_cursor"`
}

func (b *Btwitter) GetDmEvent(count int) (*twitter.DirectMessageEvents, error) {
	dmEvent, resp, err := b.twitterClient.DirectMessages.EventsList(&twitter.DirectMessageEventsListParams{
		Cursor: "",
		Count:  count,
	})
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	return dmEvent, nil
}
func (b *Btwitter) SetDmEvent(recipID string, text string, mediaID int64) (*twitter.DirectMessageEvent, error) {
	sendDmParams := &twitter.DirectMessageEventsNewParams{
		Event: &twitter.DirectMessageEvent{
			Type: "message_create",
			Message: &twitter.DirectMessageEventMessage{
				Target: &twitter.DirectMessageTarget{
					RecipientID: recipID,
				},
				Data: &twitter.DirectMessageData{
					Text:     text,
					Entities: &twitter.Entities{},
				},
			},
		},
	}

	if mediaID != 0 {
		sendDmParams.Event.Message.Data.Attachment = &twitter.DirectMessageDataAttachment{
			Type: "media",
			Media: twitter.MediaEntity{
				ID: mediaID,
			},
		}
	}
	sendEv, resp, err := b.twitterClient.DirectMessages.EventsNew(sendDmParams)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	return sendEv, nil
}
func (b *Btwitter) GetUserInfo(userID int64) (*twitter.User, error) {

	user, resp, err := b.twitterClient.Users.Show(&twitter.UserShowParams{
		UserID:          1592597515597144069,
		ScreenName:      "",
		IncludeEntities: new(bool),
	})
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	return user, nil
}
func (b *Btwitter) GetAccountInfo() (*twitter.User, error) {

	user, resp, err := b.twitterClient.Accounts.VerifyCredentials(&twitter.AccountVerifyParams{})
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	return user, nil
}

func (b *Btwitter) RatelimitStatus() (*twitter.User, error) {
	request, err := http.NewRequest("GET", "https://api.twitter.com/1.1/application/rate_limit_status.json", nil)
	if err != nil {
		return nil, err
	}
	resp, err := b.client.Do(request)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()
	bb, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	os.WriteFile("/tmp/rate_limit.json", bb, 0666)

	return nil, nil
}
